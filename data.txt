gh repo create your-repo-name --public --source=. --remote=origin --push
winget install GitHub.cli
gh --version

gh version 2.x.x
gh auth login
gh repo create your-repo-name --public --source=. --remote=origin --push

Command Breakdown:
gh:
The GitHub CLI command — lets you interact with GitHub from your terminal.

repo create your-repo-name:
This tells GitHub CLI to create a new repository on GitHub with the name your-repo-name.

--public:
Makes the repo public.
(You can use --private if you don’t want it to be publicly visible.)

--source=.:
Tells it to use the current directory (.) as the source for the repository.
It will create the repo based on the files in your local folder.

--remote=origin:
Sets the remote GitHub repo's name to origin (which is the default remote name Git uses).
This links your local repo to the one on GitHub.

--push:
Pushes (uploads) your local files to the new GitHub repo after creating it.
git clone https://github.com/username/repo.git
git clone git@github.com:username/repo.git

Switching your existing Git remote from HTTPS to SSH
git remote -v
origin  https://github.com/your-username/your-repo.git (fetch)
origin  https://github.com/your-username/your-repo.git (push)
git@github.com:your-username/your-repo.git
git remote set-url origin git@github.com:your-username/your-repo.git
git remote -v
origin  git@github.com:your-username/your-repo.git (fetch)
origin  git@github.com:your-username/your-repo.git (push)


*********************************************************************************************************
1. HEAD
HEAD is a pointer to your current checked-out commit.

In this case, it’s pointing to the latest commit on your current branch.
 2. HEAD -> master
This means:

You’re currently on the master branch

That branch is pointing to commit 463ddd...

HEAD is following master

So it's like: HEAD → master → commit 463ddd


 3. origin/master
origin is your remote (i.e., GitHub)

origin/master is the latest commit on the master branch in the remote repo

So Git is saying:

"Your local master is aligned with the remote origin/master."


4. origin/HEAD
This is a pointer used by Git to tell:

“What’s the default branch of the remote?”

Usually, it points to origin/master or origin/main.


What is origin/HEAD exactly?
origin/HEAD is a symbolic reference (or a shortcut) that tells Git:

“When I clone or reference the remote called origin, which branch should I treat as the default?”

🧠 Think of it like this:
When you clone a repo:

git clone git@github.com:someone/some-repo.git
Git asks the server (GitHub):

"Hey, which branch should I check out by default?"

The server responds:

“The default branch is main (or master, or something else).”

That info gets stored locally in your Git as:

origin/HEAD -> origin/main   ← if main is default
or
origin/HEAD -> origin/master  ← if master is default
So origin/HEAD is basically:

"The default branch at the remote."

📌 Why is this useful?
It allows Git to know what to do when you run something like:

git checkout origin
Even though origin is the remote name, Git understands it as:

git checkout origin/HEAD → which points to → origin/main or origin/master
💡 You can check where it points by running:
git remote show origin
You’ll see something like:
HEAD branch: master
HEAD branch: main
That tells you exactly what origin/HEAD is pointing to.

🧠 Final analogy (quick visual):
origin/HEAD
    |
    v
origin/master ← (if master is the default branch on GitHub)
It’s just a pointer to the remote's default branch, nothing more — but it’s handy for Git's internal routing.
